# -*- coding: utf-8 -*-
"""ARIMA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11iGbkz0zlBs38hj2bW8KsLdAHBM0SxRm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Loading and Preprocessing Data**

"""

df = pd.read_csv("/content/hack.csv")

df.head()

df.tail()

df.shape

df.describe()

df.columns

df.size

df.dtypes

df.count()

df.info()

"""**Handling Missing Values**"""

df.isnull().sum()

"""**Visualization**"""

# Assuming df contains the loaded dataset
plt.figure(figsize=(10, 6))
plt.plot(df['Year'], df['Enrollement Numbers'], marker='o', linestyle='-')
plt.title('Enrollment Numbers Over the Years')
plt.xlabel('Year')
plt.ylabel('Enrollment Numbers')
plt.grid(True)
plt.xticks(rotation=45)
plt.tight_layout()

# Display the plot
plt.show()

x = df["Year"]
y = df["No of People Placed"]
plt.figure(figsize=(15, 6))
plt.plot(x, y)
plt.xlabel("Year")
plt.ylabel("No.of peoples placed")
plt.title("placement")
plt.show()

# Assuming df is your DataFrame
column1 = 'CSE'
column2 = 'ECE'
column3 = 'MECH'
column4 = 'EEE'

plt.figure(figsize=(12, 6))  # Adjust figure size as needed

# Plotting multiple lines on the same figure
plt.plot(df.index, df[column1], label='COMPUTER SCIENCE & ENGINEERING')
plt.plot(df.index, df[column2], label='ELECTRONICS & COMMUNICATION ENGINEERING')
plt.plot(df.index, df[column3], label='MECHANICAL ENGINEERING')
plt.plot(df.index, df[column4], label='ELECTRICAL & ELECTRONICS ENGINEERING')

plt.legend()

plt.title('MOST TRENDING COURSES')
plt.xlabel('courses')
plt.ylabel('enrollment count')
plt.grid(True)
plt.show()

x = df["Pass %"]  # Replace "Pass %" with the actual column name
y = df["No of People Placed"]  # Replace "No of People Placed" with the actual column name

plt.bar(x, y)

plt.xlabel("YEARLY PASSOUT PERCENTAGE")
plt.ylabel("Number of People Placed")
plt.title("Comparison between pass percentage & number of people placed")

plt.show()

"""**Training and Testing**"""

from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
# Assuming the dataset is sorted by year, you can use the "tail" method to get the last 10 years
enrollment = df["Enrollement Numbers"].tail(10)

# Split the data into training and testing sets
train_size = int(len(enrollment) * 0.8)
train, test = enrollment[:train_size], enrollment[train_size:]

"""**Finding the RMSE value**"""

# Fit an ARIMA model with order (p=1, d=1, q=0) using the training data
model = ARIMA(train, order=(1, 1, 0))
model_fit = model.fit()

# Make predictions on the testing set
predictions = model_fit.forecast(steps=len(test))

# Calculate Mean Squared Error (MSE) as a measure of accuracy
mse = mean_squared_error(test, predictions)
rmse = np.sqrt(mse)

# Print the RMSE value
print(f"Root Mean Squared Error (RMSE): {rmse}")

# You can also print or visualize the actual vs. predicted values for further analysis
print("Actual values:")
print(test)
print("Predicted values:")
print(predictions)

"""**Prediction**

**Finding Accuracy**
"""

# Provided information
actual_value =  1918,2034
predicted_value = 2129.52,2274.31
rmse = 226.37

# Calculate the range of actual values
min_actual = df['Enrollement Numbers'].min()
max_actual = df['Enrollement Numbers'].max()
range_actual = max_actual - min_actual

# Calculate the accuracy percentage
accuracy_percentage = (1 - (rmse / range_actual)) * 100

print(f'Accuracy Percentage: {accuracy_percentage:.2f}%')